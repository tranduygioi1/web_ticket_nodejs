<h1 class="mt-3">Gán quyền cho người dùng</h1>

<div class="row mt-3">
  <div class="col-md-6">
    <label class="form-label fw-bold">Full Name:</label>
    <input type="text" class="form-control" value="{{user.fullName}}" disabled>
  </div>

  <div class="col-md-6">
    <label class="form-label fw-bold">Tên đăng nhập:</label>
    <input type="text" class="form-control" value="{{user.username}}" disabled>
  </div>
</div>

<form action="/admin/assign_roles/{{user._id}}" method="POST" id="assignRolesForm">
  <div class="row mt-3">
    <div class="col-md-5">
      <label class="form-label fw-bold">Danh sách Role</label>
      <input type="text" class="form-control mb-2" placeholder="Tìm kiếm..." onkeyup="filterRoles(this, 'availableRoles')">
      <select multiple class="form-control" id="availableRoles" name="availableRoles">
        {{#each allRoles}}
          <option value="{{this}}">{{this}}</option>
        {{/each}}
      </select>
    </div>

    <div class="col-md-2 d-flex flex-column justify-content-center align-items-center gap-2">
      <button type="button" class="btn btn-outline-primary" onclick="assignSelected()">→</button>
      <button type="button" class="btn btn-outline-secondary" onclick="removeSelected()">←</button>
    </div>

    <div class="col-md-5">
      <label class="form-label fw-bold">Role Assign</label>
      <select multiple class="form-control" id="assignedRoles" name="assignedRoles[]">
        {{#each assignedRoles}}
          <option value="{{this}}">{{this}}</option>
        {{/each}}
      </select>
    </div>
  </div>

  <div class="mt-4">
    <button type="submit" class="btn btn-success">Lưu</button>
    <a href="/admin/manage_admin" class="btn btn-secondary">Quay lại</a>
  </div>
</form>

<script>
  function assignSelected() {
    const available = document.getElementById('availableRoles');
    const assigned = document.getElementById('assignedRoles');

    [...available.selectedOptions].forEach(option => {
      assigned.appendChild(option.cloneNode(true));
      option.remove();
    });
  }

  function removeSelected() {
    const assigned = document.getElementById('assignedRoles');
    const available = document.getElementById('availableRoles');

    [...assigned.selectedOptions].forEach(option => {
      available.appendChild(option.cloneNode(true));
      option.remove();
    });
  }

  function filterRoles(input, listId) {
    const filter = input.value.toLowerCase();
    const list = document.getElementById(listId);
    const options = list.options;

    for (let i = 0; i < options.length; i++) {
      const txt = options[i].text.toLowerCase();
      options[i].style.display = txt.includes(filter) ? '' : 'none';
    }
  }

  // Chọn hết option trong assignedRoles trước khi submit form
  document.getElementById('assignRolesForm').addEventListener('submit', function() {
    const assigned = document.getElementById('assignedRoles');
    for (let i = 0; i < assigned.options.length; i++) {
      assigned.options[i].selected = true;
    }
  });
</script>
